require '../HyperTensioN/tests/hypest'

class Path < Test::Unit::TestCase
  include Hypest

  def test_search_angle_pb1_ujshop_parsing
    parser_tests(
      # Files
      'examples/search_angle/search.ujshop',
      'examples/search_angle/pb1.ujshop',
      # Parser and extensions
      UJSHOP_Parser, [],
      # Attributes
      :domain_name => 'search',
      :problem_name => 'pb1',
      :operators => [
        ['move', ['?agent', '?from', '?to'],
          # Preconditions
          ['and',
            ['at', '?agent', '?from'],
            ['call', 'visible', '?from', '?to']
          ],
          # Effects
          [['at', '?agent', '?to']],
          [['at', '?agent', '?from']],
          # Probability
          1
        ],
        ['invisible_visit', ['?agent', '?pos'],
          # Preconditions
          [],
          # Effects
          [['visited', '?agent', '?pos']],
          [],
          # Probability
          1
        ],
        ['invisible_unvisit', ['?agent', '?pos'],
          # Preconditions
          [],
          # Effects
          [],
          [['visited', '?agent', '?pos']],
          # Probability
          1
        ]
      ],
      :methods => [
        ['forward', ['?agent', '?goal'],
          ['base',
            # Preconditions
            ['at', '?agent', '?goal'],
            # Subtasks
            [],
          ],
          ['goal-visible',
            # Preconditions
            ['and',
              ['at', '?agent', '?from'],
              ['call', 'visible', '?from', '?goal']
            ],
            # Subtasks
            [['move', '?agent', '?from', '?goal']]
          ],
          ['recursion',
            # Preconditions
            ['and',
              ['at', '?agent', '?from'],
              ['visible-vertex', '?from', '?vertex'],
              ['arc', '?from', '?vertex', '?place'],
              ['not', ['visited', '?agent', '?vertex']],
            ],
            # Subtasks
            [
              ['move', '?agent', '?from', '?place'],
              ['invisible_visit', '?agent', '?vertex'],
              ['forward', '?agent', '?goal'],
              ['invisible_unvisit', '?agent', '?vertex']
            ]
          ]
        ]
      ],
      :predicates => {
        'at' => true,
        'visited' => true
      },
      :state => [['at', 'robot', 'start']],
      :tasks => [true, ['forward', 'robot', 'goal']],
      :axioms => [],
      :rewards => [],
      :attachments => [
        ['arc', '?from', '?to', '?arc_to'],
        ['visible-vertex', '?from', '?vertex']
      ]
    )
  end

  def test_search_angle_pb1_ujshop_parsing_compile_to_rb
    compiler_tests(
      # Files
      'examples/search_angle/search.ujshop',
      'examples/search_angle/pb1.ujshop',
      # Parser and extensions
      UJSHOP_Parser, [], 'rb',
      # Domain
      "# Generated by Hype
require '#{File.expand_path('../../Hypertension_U', __FILE__)}'
require_relative 'external' if File.exist?(File.expand_path('../external.rb', __FILE__))

module Search
  include Hypertension_U
  extend self

  #-----------------------------------------------
  # Domain
  #-----------------------------------------------

  @domain = {
    # Operators
    'move' => 1,
    'invisible_visit' => 1,
    'invisible_unvisit' => 1,
    # Methods
    'forward' => [
      'forward_base',
      'forward_goal_visible',
      'forward_recursion'
    ]
  }

  #-----------------------------------------------
  # Operators
  #-----------------------------------------------

  def move(agent, from, to)
    return unless (@state['at'].include?([agent, from]) and External.visible(from, to))
    @state = @state.dup
    (@state['at'] = @state['at'].dup).delete([agent, from])
    @state['at'].unshift([agent, to])
  end

  def invisible_visit(agent, pos)
    @state = @state.dup
    (@state['visited'] = @state['visited'].dup).unshift([agent, pos])
  end

  def invisible_unvisit(agent, pos)
    @state = @state.dup
    (@state['visited'] = @state['visited'].dup).delete([agent, pos])
  end

  #-----------------------------------------------
  # Methods
  #-----------------------------------------------

  def forward_base(agent, goal)
    return unless @state['at'].include?([agent, goal])
    yield []
  end

  def forward_goal_visible(agent, goal)
    from = ''
    generate(
      # Positive preconditions
      [
        ['at', agent, from]
      ],
      # Negative preconditions
      [], from
    ) {
      next unless External.visible(from, goal)
      yield [
        ['move', agent, from, goal]
      ]
    }
  end

  def forward_recursion(agent, goal)
    from = ''
    generate(
      # Positive preconditions
      [
        ['at', agent, from]
      ],
      # Negative preconditions
      [], from
    ) {
      vertex = ''
      External.visible_vertex(from, vertex) {
        place = ''
        External.arc(from, vertex, place) {
          next unless not @state['visited'].include?([agent, vertex])
          yield [
            ['move', agent, from, place],
            ['invisible_visit', agent, vertex],
            ['forward', agent, goal],
            ['invisible_unvisit', agent, vertex]
          ]
        }
      }
    }
  end
end",
      # Problem
      "# Generated by Hype
require_relative 'search.ujshop'

# Objects
robot = 'robot'
start = 'start'
goal = 'goal'

Search.problem(
  # Start
  {
    'at' => [
      [robot, start]
    ],
    'visited' => []
  },
  # Tasks
  [
    ['forward', robot, goal]
  ],
  # Debug
  ARGV.first == 'debug',
  # Maximum plans found
  ARGV[1] ? ARGV[1].to_i : -1,
  # Minimum probability for plans
  ARGV[2] ? ARGV[2].to_f : 0
) or abort"
    )
  end
end