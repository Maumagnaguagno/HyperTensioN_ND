(defdomain generator (

  (:attachments (step ?t ?min ?max ?step))

  (:- (enough-fuel ?g ?t) (call >= (call function (fuelLevel ?g) ?t) 1000))
  (:- (minimum-fuel ?g ?t) (call >= (call function (fuelLevel ?g) ?t) 0))
  (:- (maximum-fuel ?g ?t) (call <= (call function (fuelLevel ?g) ?t) (call function (capacity ?g))))

  (:operator (!generate-start ?g ?start ?finish)
    (
      (minimum-fuel ?g ?start)
    )
    ()
    (
      (protect-axiom minimum-fuel ?g)
      (call process decrease (fuelLevel ?g) identity ?start ?finish)
    )
  )

  (:operator (!generate-finish ?g ?start ?finish)
    (
      (minimum-fuel ?g ?finish)
    )
    (
      (protect-axiom minimum-fuel ?g)
    )
    (
      (generator-ran)
    )
  )

  (:operator (!refuel-start ?g ?t ?start ?finish)
    (
      (maximum-fuel ?g ?start)
    )
    (
      (available ?t)
    )
    (
      (refueling ?g)
      (protect-axiom maximum-fuel ?g)
      (call process increase (fuelLevel ?g) double ?start ?finish)
    )
  )

  (:operator (!refuel-finish ?g ?t ?start ?finish)
    (
      (maximum-fuel ?g ?finish)
    )
    (
      (refueling ?g)
      (protect-axiom maximum-fuel ?g)
    )
    ()
  )

  (:method (generate ?g)
    (
      (generator ?g)
      (step ?start)
      (minimum-fuel ?g ?start)
    )
    (
      (!generate-start  ?g ?start (call + ?start 1000))
      (!generate-finish ?g ?start (call + ?start 1000))
    )
  )

  (:method (refuel ?g ?t)
    (
      (generator ?g)
      (not (refueling ?g))
      (tank ?t)
      (available ?t)
      (step ?start)
      (maximum-fuel ?g ?start)
    )
    (
      (!refuel-start  ?g ?t ?start (call + ?start 10))
      (!refuel-finish ?g ?t ?start (call + ?start 10))
    )
  )

  (:method (multiple-refuel ?g ?start)
    enough-fuel
    (
      (enough-fuel ?g ?start)
    )
    ()
    add-fuel
    (
      (tank ?t)
      (available ?t)
      (assign ?finish (call + ?start 10))
    )
    (
      (!refuel-start  ?g ?t ?start ?finish)
      (!refuel-finish ?g ?t ?start ?finish)
      (multiple-refuel ?g ?finish)
    )
  )

  (:method (refuel-and-generate ?g)
    ()
    (
      (multiple-refuel ?g 0)
      (generate ?g)
    )
  )
))